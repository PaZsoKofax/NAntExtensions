<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2013-2013 Stephen Tunney, Canada (stephen.tunney@gmail.com) -->
<!-- For an updated copy of these scripts sync to https://github.com/stunney/NAntExtensions -->
<project name="WiX.Light.CustomTask"  xmlns="http://nant.sf.net/release/0.92/nant.xsd">
  <script language="C#">
    <references>
      <include name="System.dll" />
      <!--<include name="${nant::get-base-directory()}/NAnt.Contrib.Tasks.dll" />-->
    </references>
    <imports>
      <import namespace="NAnt.Core" />
      <!--<import namespace="NAnt.Contrib.Tasks" />-->
      <import namespace="NAnt.Core.Tasks" />
      <import namespace="NAnt.Core.Attributes" />
      <import namespace="NAnt.Core.Types" />
      <import namespace="System.ComponentModel" />
      <import namespace="System.Globalization" />
    </imports>
    <code>
      <![CDATA[      
		[TaskName("custom_wix_light")]
		public class WiXMeltTask: NAnt.Core.Tasks.ExecTask
		{
			#region Public Instance Properties

      [TaskAttribute("noTidy", Required=false)]
			[BooleanValidator()]
			public virtual bool NoTidy { get; set; }

			[TaskAttribute("noLogo", Required=false)]
			[BooleanValidator()]
			public virtual bool NoLogo { get; set; }

			[TaskAttribute("allWarningsAsErrors", Required=false)]
			[BooleanValidator()]
			public virtual bool AllWarningsAsErrors { get; set; }
			
			[TaskAttribute("warningsAsErrors", Required=false)]
			[StringValidator(AllowEmpty=false)]
			public virtual string WarningsAsErrors { get; set; }
			
			[TaskAttribute("supressAllWarnings", Required=false)]
			public virtual bool SupressAllWarnings { get; set; }
			
			[TaskAttribute("supressWarnings", Required=false)]
			[StringValidator(AllowEmpty=false)]
			public virtual string SupressWarning { get; set; }
			
			[TaskAttribute("extensionClassAssemblyFQCN", Required=false)]
			[StringValidator(AllowEmpty=false)]
			public virtual string ExtensionClassAssemblyFullyQualifiedClassName { get; set; }
			
			[TaskAttribute("program", Required=false)]
			[StringValidator(AllowEmpty=false)]
			public new string FileName
			{
				get{ return base.FileName; }
				set{ base.FileName = value; }
			}
    
			[TaskAttribute("debug", Required = false)]
			[BooleanValidator()]
			public virtual bool DebugTask { get; set; }
      
      [TaskAttribute("allowIdenticalRows", Required=false)]
			public virtual bool AllowIdenticalRows { get; set; } //-ai
      
      [TaskAttribute("allowUnresolvedReferences", Required=false)]
			public virtual bool AllowUnresolvedReferences { get; set; } //-au
      
      [TaskAttribute("bindFilesIntoWixout", Required=false)]
			public virtual bool BindFilesIntoWixout { get; set; } //-bf (requires -xo)
      
      [TaskAttribute("binderPath", Required = false)]
      [StringValidator(AllowEmpty=false)]
      public virtual string BinderPath {get;set;} //-b <path>
      
      [TaskAttribute("out", Required = true)]
      [StringValidator(AllowEmpty=false)]
      public virtual string Out {get;set;} //-out <path>
      
      [BuildElement("in")]
      public virtual NAnt.Core.Tasks.InElement InElement { get; set; }

			#endregion Public Instance Properties

			#region Override implementation of Task

			protected override void ExecuteTask() {
			
				if (DebugTask && !System.Diagnostics.Debugger.IsAttached) System.Diagnostics.Debugger.Launch();
				
				Log(Level.Info, "Set Up");
				
				try
				{
					if(string.IsNullOrEmpty(base.FileName)) base.FileName = "light.exe";
					
					const string boolFormat = @" {0}";
					const string stringFormat = @" {0} {1}";
					
					string arguments = string.Empty;
          
          if(NoLogo)
					{
						arguments += string.Format(boolFormat, @"-nologo");
					}
          
					if(AllWarningsAsErrors)
					{
						arguments += string.Format(boolFormat, @"-wxall");
					}					
					else if(!string.IsNullOrEmpty(WarningsAsErrors))
					{
						string[] warnings = WarningsAsErrors.Split(',');
						foreach(string s in warnings)
						{
							arguments += string.Format(@" -wx{0}", s);
						}
					}
					
          if(SupressAllWarnings)
					{
						arguments += string.Format(boolFormat, @"-swall");
					}
					else if(!string.IsNullOrEmpty(SupressWarning))
					{
						string[] warnings = WarningsAsErrors.Split(',');
						foreach(string s in warnings)
						{
							arguments += string.Format(@" -sw{0}", s);
						}
					}
          
          if(NoTidy) arguments += string.Format(@" -notidy");
          
					if(!string.IsNullOrEmpty(ExtensionClassAssemblyFullyQualifiedClassName))
					{
						arguments += string.Format(stringFormat, @"-ext", ExtensionClassAssemblyFullyQualifiedClassName);
					}             

					if(base.Verbose)
					{
						arguments += string.Format(boolFormat, @"-v");
					}
          
          if(!string.IsNullOrEmpty(BinderPath)) arguments += string.Format(@" -b ""{0}""", BinderPath);
          
          arguments += string.Format(@" -out ""{0}""", Out);
          
          foreach(string objectFile in InElement.Items.AsIs)
          {
            if(!File.Exists(objectFile)) throw new Exception(string.Format("File {0} not found.", objectFile));
            
            arguments += string.Format(@" ""{0}""", objectFile);
          }
					
					base.CommandLineArguments = string.Format(@"{0}", arguments);
					
					Log(Level.Info, base.CommandLineArguments);
					
					base.ExecuteTask();
					Log(Level.Info, "Done!");
				}
				catch(Exception ex)
				{
					Log(Level.Info, "Exception handled");
				
					Exception e = ex;
					while(null != e) 
					{
						Log(Level.Error, ex.Message);
						Log(Level.Error, ex.StackTrace);
					
						e = e.InnerException;
					}
				
					throw;
				}
			}
			#endregion Override implementation of Task
		}
		]]>
    </code>
  </script>

  <target name="light.example">
    <custom_wix_light out=".\patch.wixmsp"
      verbose="true">
      <in>
        <items>
          <include name="C:\Users\Stephen\Documents\Visual Studio 2012\Projects\UpgradeSample\Patch\obj\Debug\Patch.wixobj" asis="true" />
        </items>
      </in>
    </custom_wix_light>
  </target>
</project>