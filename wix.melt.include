<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2013-2013 Stephen Tunney, Canada (stephen.tunney@gmail.com) -->
<!-- For an updated copy of these scripts sync to https://github.com/stunney/NAntExtensions -->
<project name="WiX.Heat.CustomTask" xmlns="http://nant.sf.net/release/0.92/nant.xsd">
  <script language="C#">
    <references>
      <include name="System.dll" />
      <!--<include name="${nant::get-base-directory()}/NAnt.Contrib.Tasks.dll" />-->
    </references>
    <imports>
      <import namespace="NAnt.Core" />
      <!--<import namespace="NAnt.Contrib.Tasks" />-->
      <import namespace="NAnt.Core.Tasks" />
      <import namespace="NAnt.Core.Attributes" />
      <import namespace="NAnt.Core.Types" />
      <import namespace="System.ComponentModel" />
      <import namespace="System.Globalization" />
    </imports>
    <code>
      <![CDATA[      
		[TaskName("custom_wix_melt")]
		public class WiXMeltTask: NAnt.Core.Tasks.ExecTask
		{
			#region Public Instance Properties

      [TaskAttribute("noTidy", Required=false)]
			[BooleanValidator()]
			public virtual bool NoTidy { get; set; }

			[TaskAttribute("noLogo", Required=false)]
			[BooleanValidator()]
			public virtual bool NoLogo { get; set; }

			[TaskAttribute("allWarningsAsErrors", Required=false)]
			[BooleanValidator()]
			public virtual bool AllWarningsAsErrors { get; set; }
			
			[TaskAttribute("warningsAsErrors", Required=false)]
			[StringValidator(AllowEmpty=false)]
			public virtual string WarningsAsErrors { get; set; }
			
			[TaskAttribute("supressAllWarnings", Required=false)]
			public virtual bool SupressAllWarnings { get; set; }
			
			[TaskAttribute("supressWarnings", Required=false)]
			[StringValidator(AllowEmpty=false)]
			public virtual string SupressWarning { get; set; }
			
			[TaskAttribute("extensionClassAssemblyFQCN", Required=false)]
			[StringValidator(AllowEmpty=false)]
			public virtual string ExtensionClassAssemblyFullyQualifiedClassName { get; set; }
			
      [TaskAttribute("extractBinariesTo", Required = true)]
      [StringValidator(AllowEmpty=false)]
      public virtual string ExtractedBinariesPath {get;set;}
      
			[TaskAttribute("program", Required=false)]
			[StringValidator(AllowEmpty=false)]
			public new string FileName
			{
				get{ return base.FileName; }
				set{ base.FileName = value; }
			}
    
			[TaskAttribute("debug", Required = false)]
			[BooleanValidator()]
			public virtual bool DebugTask { get; set; }
      
      [TaskAttribute("windowsInstallerOrMergeModuleInput", Required = true)]
      [StringValidator(AllowEmpty=false)]
      public virtual string InputInstallerFilename {get;set;}
		
      [TaskAttribute("msmWXSOutputFilename", Required = false)]
      [StringValidator(AllowEmpty=false)]
      public virtual string MergeModuleWXSOutputFilename {get;set;}
      
      [TaskAttribute("msiPDBOutputFilename", Required = false)]
      [StringValidator(AllowEmpty=false)]
      public virtual string MSIPDBOutputFilename {get;set;}
      
      [TaskAttribute("msiPDBInputFilename", Required = false)]
      [StringValidator(AllowEmpty=false)]
      public virtual string MSIPDBInputFilename {get;set;}
      
      [TaskAttribute("msmFriendlyId", Required = false)]
      [StringValidator(AllowEmpty=false)]
      public virtual string MSMFriendlyId {get;set;}
    
      [TaskAttribute("exportBinariesPath", Required = false)]
      [StringValidator(AllowEmpty=false)]
      public virtual string ExportBinariesPath {get;set;}

			#endregion Public Instance Properties

			#region Override implementation of Task

			protected override void ExecuteTask() {
			
				if (DebugTask && !System.Diagnostics.Debugger.IsAttached) System.Diagnostics.Debugger.Launch();
				
				Log(Level.Info, "Set Up");
				
				try
				{
					if(string.IsNullOrEmpty(base.FileName)) base.FileName = "melt.exe";
					
					const string boolFormat = @" {0}";
					const string stringFormat = @" {0} {1}";
					
					string arguments = string.Empty;
          
          if(NoLogo)
					{
						arguments += string.Format(boolFormat, @"-nologo");
					}
          
					if(AllWarningsAsErrors)
					{
						arguments += string.Format(boolFormat, @"-wxall");
					}					
					else if(!string.IsNullOrEmpty(WarningsAsErrors))
					{
						string[] warnings = WarningsAsErrors.Split(',');
						foreach(string s in warnings)
						{
							arguments += string.Format(@" -wx{0}", s);
						}
					}
					
          if(SupressAllWarnings)
					{
						arguments += string.Format(boolFormat, @"-swall");
					}
					else if(!string.IsNullOrEmpty(SupressWarning))
					{
						string[] warnings = WarningsAsErrors.Split(',');
						foreach(string s in warnings)
						{
							arguments += string.Format(@" -sw{0}", s);
						}
					}
          
          if(NoTidy) arguments += string.Format(@" -notidy");

          if(!string.IsNullOrEmpty(ExtractedBinariesPath))
          {
            arguments += string.Format(@" -x ""{0}""", ExtractedBinariesPath);
          }
          
					if(!string.IsNullOrEmpty(ExtensionClassAssemblyFullyQualifiedClassName))
					{
						arguments += string.Format(stringFormat, @"-ext", ExtensionClassAssemblyFullyQualifiedClassName);
					}             

					if(base.Verbose)
					{
						arguments += string.Format(boolFormat, @"-v");
					}          

          FileInfo inputFile = new FileInfo(InputInstallerFilename);
          
          if(!inputFile.Exists)
          {
            throw new Exception(string.Format("Could not find input file {0}.", inputFile.FullName));
          }
          
          if(!string.IsNullOrEmpty(MergeModuleWXSOutputFilename) && !string.IsNullOrEmpty(MSIPDBOutputFilename))
          {
            throw new Exception("attributes, 'msmWXSOutputFilename' AND 'msiPDBOutputFilename' can not BOTH be chosen.");
          }
          
          if(!string.IsNullOrEmpty(MergeModuleWXSOutputFilename))
          {
            if(".msm" != inputFile.Extension.ToLower())
            {
              throw new Exception("You need to specify a windows installer merge module (.msm extension) in order to get WXS output.");
            }
            
            Log(Level.Info, "Doing MergeModule Melt.");
            
            arguments += string.Format(@" ""{0}"" ""{1}""", inputFile.FullName, MergeModuleWXSOutputFilename);
          }
          else if(!string.IsNullOrEmpty(MSIPDBOutputFilename))
          {
            if(".msi" != inputFile.Extension.ToLower())
            {
              throw new Exception("You need to specify a windows installer (.msi extension) in order to get PDB output.");
            }
            
            if(!File.Exists(MSIPDBInputFilename))
            {
              throw new Exception(string.Format("Could not find msiPDBInputFilename at {0}", MSIPDBInputFilename));
            }
            
            Log(Level.Info, "Doing MSI Melt.");
            
            arguments += string.Format(@" ""{0}"" ""{1}"" -pdb ""{2}""", inputFile.FullName, MSIPDBOutputFilename, MSIPDBInputFilename);
          }
					
					base.CommandLineArguments = string.Format(@"{0}", arguments);
					
					Log(Level.Info, base.CommandLineArguments);
					
					base.ExecuteTask();
					Log(Level.Info, "Done!");
				}
				catch(Exception ex)
				{
					Log(Level.Info, "Exception handled");
				
					Exception e = ex;
					while(null != e) 
					{
						Log(Level.Error, ex.Message);
						Log(Level.Error, ex.StackTrace);
					
						e = e.InnerException;
					}
				
					throw;
				}
			}
			#endregion Override implementation of Task
		}
		]]>
    </code>
  </script>

  <target name="melt.example">
    <custom_wix_melt
      windowsInstallerOrMergeModuleInput="./RTM/UpgradeSample.msi"
      msiPDBInputFilename="./RTM/UpgradeSample.wixpdb"
      extractBinariesTo="./RTM/Melted"
      msiPDBOutputFilename="./RTM/Melted/UpgradeSample.wixpdb"
      verbose="true" noLogo="true" noTidy="true" allWarningsAsErrors="false" supressAllWarnings="false" />
    <custom_wix_melt
      windowsInstallerOrMergeModuleInput="./Upgrade/UpgradeSample.msi"
      msiPDBInputFilename="./Upgrade/UpgradeSample.wixpdb"
      extractBinariesTo="./Upgrade/Melted"
      msiPDBOutputFilename="./Upgrade/Melted/UpgradeSample.wixpdb"
      verbose="true" noLogo="true" noTidy="true" allWarningsAsErrors="false" supressAllWarnings="false" />
  </target>
</project>